from flask import Flask, request, render_template, redirect, url_for
import os
import subprocess
import re
import time

app = Flask(__name__)

def parse_nmap_output(scan_output):
    """ Parse the Nmap output file to extract ports and services. """
    services = {}
    with open(scan_output, 'r') as file:
        for line in file:
            match = re.search(r'(\d+)/tcp\s+open\s+(\S+)', line)
            if match:
                port = match.group(1)
                service = match.group(2)
                if service not in services:
                    services[service] = []
                services[service].append(port)
    return services

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        url = request.form['url']
        sanitized_url = url.replace('/', '_').replace(':', '_')
        output_dir = f"./scans/{sanitized_url}"
        os.makedirs(output_dir, exist_ok=True)
        
        # Perform Nmap scan
        nmap_command = f"nmap -sS -sC -sV -p- -oA {output_dir}/output {url}"
        subprocess.run(nmap_command, shell=True, check=True)  # Run the Nmap scan and wait for it to complete
        
        # Small delay to ensure file system writes are complete
        time.sleep(1)
        
        # Check if the Nmap output file exists
        nmap_output_file = f"{output_dir}/output.nmap"
        if not os.path.exists(nmap_output_file):
            return f"Error: Nmap output file {nmap_output_file} does not exist."
        
        return redirect(url_for('scan_results', scan_id=sanitized_url))
    
    # Ensure the scans directory exists
    if not os.path.exists('./scans/'):
        os.makedirs('./scans/')
    
    # List all past scans
    past_scans = os.listdir('./scans/')
    return render_template('index.html', past_scans=past_scans)

@app.route('/results/<scan_id>')
def scan_results(scan_id):
    output_dir = f"./scans/{scan_id}"
    nmap_output_file = f"{output_dir}/output.nmap"
    services = parse_nmap_output(nmap_output_file)
    return render_template('results.html', services=services, scan_id=scan_id)

if __name__ == '__main__':
    app.run(debug=True)
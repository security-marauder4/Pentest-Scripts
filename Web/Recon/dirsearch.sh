#!/bin/bash

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to log messages
log() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    case $level in
        "INFO") echo -e "${GREEN}[INFO]${NC} ${timestamp} - $message" ;;
        "WARN") echo -e "${YELLOW}[WARN]${NC} ${timestamp} - $message" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} ${timestamp} - $message" ;;
    esac
}

# Function to check requirements
check_requirements() {
    if ! command -v dirsearch &> /dev/null; then
        log "ERROR" "dirsearch is required but not installed."
        exit 1
    fi
    
    if [ ! -f "/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt" ]; then
        log "ERROR" "Wordlist not found. Please install dirbuster wordlists."
        exit 1
    fi
}

# Common web extensions
WEB_EXTENSIONS="php,asp,aspx,jsp,html,js,txt,conf,bak,zip,tar.gz,old"

# Function to run dirsearch scan
run_single_dirsearch() {
    local url=$1
    local output_dir=$2
    local scan_start_time=$(date '+%Y-%m-%d %H:%M:%S')
    
    log "INFO" "Starting dirsearch scan for $url"
    log "INFO" "Scan start time: $scan_start_time"
    
    # Create scan configuration file
    echo "Scan Configuration:" > "$output_dir/scan_config.txt"
    echo "URL: $url" >> "$output_dir/scan_config.txt"
    echo "Start Time: $scan_start_time" >> "$output_dir/scan_config.txt"
    echo "Extensions: $WEB_EXTENSIONS" >> "$output_dir/scan_config.txt"
    
    # Run dirsearch with enhanced parameters
    if dirsearch -u "$url" \
        -e "$WEB_EXTENSIONS" \
        -t 10 \
        -r \
        --random-agent \
        -i 200,201,202,203,204,301,302,307,401,403 \
        -o "$output_dir/dirsearch_output.txt" \
        --format=json \
        -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt \
        --delay=0.5 \
        --timeout=10 \
        --max-rate=40 \
        --exclude-status=429 \
        --full-url \
        --recursion-depth=2 \
        2>"$output_dir/error.log"; then
        
        local scan_end_time=$(date '+%Y-%m-%d %H:%M:%S')
        log "INFO" "Scan completed successfully for $url"
        
        # Process results
        {
            echo "Scan Summary"
            echo "============"
            echo "URL: $url"
            echo "Start Time: $scan_start_time"
            echo "End Time: $scan_end_time"
            echo ""
            echo "Interesting Findings:"
            echo "===================="
        } > "$output_dir/scan_summary.txt"
        
        # Extract and categorize findings
        if [ -f "$output_dir/dirsearch_output.txt" ]; then
            grep "200" "$output_dir/dirsearch_output.txt" > "$output_dir/200_ok.txt"
            grep "30[123]" "$output_dir/dirsearch_output.txt" > "$output_dir/redirects.txt"
            grep "40[13]" "$output_dir/dirsearch_output.txt" > "$output_dir/restricted.txt"
            
            # Add counts to summary
            echo "200 OK Responses: $(wc -l < "$output_dir/200_ok.txt")" >> "$output_dir/scan_summary.txt"
            echo "Redirects: $(wc -l < "$output_dir/redirects.txt")" >> "$output_dir/scan_summary.txt"
            echo "Restricted Access: $(wc -l < "$output_dir/restricted.txt")" >> "$output_dir/scan_summary.txt"
        fi
    else
        log "ERROR" "Scan failed for $url. Check error.log for details."
        return 1
    fi
}

# Main function to run all scans
run_dirsearch_scans() {
    local base_dir="./$client_name/nmap"
    
    if [ ! -d "$base_dir" ]; then
        log "ERROR" "Base directory not found: $base_dir"
        exit 1
    }
    
    for protocol in tcp udp; do
        local protocol_dir="$base_dir/$protocol"
        [ ! -d "$protocol_dir" ] && continue
        
        for ip_dir in "$protocol_dir"/*; do
            [ ! -d "$ip_dir" ] && continue
            
            local ip=$(basename "$ip_dir" | tr '_' '.')
            local discovered_ports_dir="$ip_dir/Discovered_Ports"
            [ ! -d "$discovered_ports_dir" ] && continue
            
            for service_dir in "$discovered_ports_dir"/*; do
                [ ! -d "$service_dir" ] && continue
                
                local service=$(basename "$service_dir")
                if [[ "$service" =~ ^(http|https|www|ssl)$ ]]; then
                    for port_dir in "$service_dir"/*; do
                        [ ! -d "$port_dir" ] && continue
                        
                        local port=$(basename "$port_dir")
                        local dirsearch_dir="$port_dir/dirsearch"
                        mkdir -p "$dirsearch_dir"
                        
                        local scheme="http"
                        [[ "$service" =~ ^(https|ssl)$ ]] && scheme="https"
                        local url="${scheme}://${ip}:${port}"
                        
                        run_single_dirsearch "$url" "$dirsearch_dir"
                    done
                fi
            done
        done
    done
}

# Main execution
main() {
    check_requirements
    
    # Get client name
    read -p "Enter the client name: " client_name
    if [ -z "$client_name" ]; then
        log "ERROR" "Client name cannot be empty"
        exit 1
    fi
    
    # Create master summary file
    local master_summary="./$client_name/web_scan_summary.txt"
    echo "Web Scan Summary - $(date)" > "$master_summary"
    echo "=======================" >> "$master_summary"
    
    run_dirsearch_scans
    
    log "INFO" "All web scans completed. Check $master_summary for overview."
}

# Error handling
trap 'echo -e "${RED}An error occurred. Exiting...${NC}"; exit 1' ERR

# Execute main
main "$@"
#!/bin/bash

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to display banner
display_banner() {
    echo -e "${BLUE}"
    cat << "EOF"
    ██████╗ ███████╗ ██████╗ ██████╗ ███╗   ██╗
    ██╔══██╗██╔════╝██╔════╝██╔═══██╗████╗  ██║
    ██████╔╝█████╗  ██║     ██║   ██║██╔██╗ ██║
    ██╔══██╗██╔══╝  ██║     ██║   ██║██║╚██╗██║
    ██║  ██║███████╗╚██████╗╚██████╔╝██║ ╚████║
    ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝
                                              
    ███████╗ ██████╗ █████╗ ███╗   ██╗███████╗
    ██╔════╝██╔════╝██╔══██╗████╗  ██║██╔════╝
    ███████╗██║     ███████║██╔██╗ ██║███████╗
    ╚════██║██║     ██╔══██║██║╚██╗██║╚════██║
    ███████║╚██████╗██║  ██║██║ ╚████║███████║
    ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚══════╝
EOF
    echo -e "${NC}"
}

# Function to log messages
log() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    case $level in
        "INFO") echo -e "${GREEN}[INFO]${NC} ${timestamp} - $message" ;;
        "WARN") echo -e "${YELLOW}[WARN]${NC} ${timestamp} - $message" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} ${timestamp} - $message" ;;
    esac
}

# Function to check requirements
check_requirements() {
    local required_tools=("whatweb" "nikto" "grep" "tee")
    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            log "ERROR" "$tool is required but not installed."
            exit 1
        fi
    done
}

# Function to run whatweb scans with rate limiting
run_whatweb_scans() {
    local url=$1
    local whatweb_dir=$2
    local scan_id=$3
    local total_scans=$4
    
    log "INFO" "[$scan_id/$total_scans] Starting WhatWeb scan for: $url"
    local scan_start_time=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Create scan configuration file
    {
        echo "Scan Configuration:"
        echo "URL: $url"
        echo "Start Time: $scan_start_time"
    } > "$whatweb_dir/scan_config.txt"
    
    # Run whatweb with enhanced parameters
    if whatweb -a 1 --wait=3 --max-threads=1 \
               --no-errors --follow-redirect=never \
               "$url" | tee "$whatweb_dir/whatweb_output.txt"
    then
        local scan_end_time=$(date '+%Y-%m-%d %H:%M:%S')
        log "INFO" "[$scan_id/$total_scans] WhatWeb scan completed for: $url"
        echo "End Time: $scan_end_time" >> "$whatweb_dir/scan_config.txt"
        return 0
    else
        log "ERROR" "[$scan_id/$total_scans] WhatWeb scan failed for: $url"
        return 1
    fi
}

# Function to run nikto scans with rate limiting
run_nikto_scans() {
    local url=$1
    local nikto_dir=$2
    local scan_id=$3
    local total_scans=$4
    
    log "INFO" "[$scan_id/$total_scans] Starting Nikto scan for: $url"
    local scan_start_time=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Create scan configuration file
    {
        echo "Scan Configuration:"
        echo "URL: $url"
        echo "Start Time: $scan_start_time"
    } > "$nikto_dir/scan_config.txt"
    
    # Run nikto with enhanced parameters
    if nikto -h "$url" -Format txt \
             -output "$nikto_dir/nikto_output.txt" \
             -maxtime 900 \
             -Tuning 123457 \
             -ask no \
             -nointeractive \
             -timeout 10 \
             -Pause 2
    then
        local scan_end_time=$(date '+%Y-%m-%d %H:%M:%S')
        log "INFO" "[$scan_id/$total_scans] Nikto scan completed for: $url"
        echo "End Time: $scan_end_time" >> "$nikto_dir/scan_config.txt"
        return 0
    else
        log "ERROR" "[$scan_id/$total_scans] Nikto scan failed for: $url"
        return 1
    fi
}

# Function to create a summary report
create_summary() {
    local base_dir=$1
    local summary_file="$base_dir/web_scan_summary.txt"
    
    log "INFO" "Creating summary report"
    
    {
        echo "Web Scan Summary - $(date)"
        echo "========================="
        echo ""
        echo "WhatWeb Findings"
        echo "================"
        
        find "$base_dir" -type f -name "whatweb_output.txt" -exec sh -c '
            echo "\nFindings for $(dirname {}):";
            grep -A 2 "Summary" "{}" 2>/dev/null || echo "No summary found"
        ' \;
        
        echo -e "\nNikto Findings"
        echo "=============="
        
        find "$base_dir" -type f -name "nikto_output.txt" -exec sh -c '
            echo "\nFindings for $(dirname {}):";
            grep "+" "{}" 2>/dev/null || echo "No findings"
        ' \;
    } > "$summary_file"
    
    log "INFO" "Summary report created at: $summary_file"
}

# Function to process web services
process_web_services() {
    local base_dir=$1
    local total_services=0
    local current_service=0
    
    # Count total services first
    total_services=$(find "$base_dir" -type d -name "http" -o -name "https" -o -name "ssl" -o -name "www" | wc -l)
    
    for protocol in tcp udp; do
        local protocol_dir="$base_dir/$protocol"
        [ ! -d "$protocol_dir" ] && continue
        
        for ip_dir in "$protocol_dir"/*; do
            [ ! -d "$ip_dir" ] && continue
            
            local ip=$(basename "$ip_dir" | tr '_' '.')
            for service_dir in "$ip_dir/Discovered_Ports"/*; do
                [ ! -d "$service_dir" ] && continue
                
                local service=$(basename "$service_dir")
                if [[ "$service" =~ ^(http|https|www|ssl)$ ]]; then
                    for port_dir in "$service_dir"/*; do
                        [ ! -d "$port_dir" ] && continue
                        
                        ((current_service++))
                        local port=$(basename "$port_dir")
                        
                        # Setup directories
                        local whatweb_dir="$port_dir/whatweb"
                        local nikto_dir="$port_dir/nikto"
                        mkdir -p "$whatweb_dir" "$nikto_dir"
                        
                        # Determine URL scheme
                        local scheme="http"
                        [[ "$service" =~ ^(https|ssl)$ ]] && scheme="https"
                        local url="${scheme}://${ip}:${port}"
                        
                        # Run scans
                        run_whatweb_scans "$url" "$whatweb_dir" "$current_service" "$total_services"
                        sleep 2
                        run_nikto_scans "$url" "$nikto_dir" "$current_service" "$total_services"
                        sleep 5
                    done
                fi
            done
        done
    done
}

# Main execution
main() {
    display_banner
    check_requirements
    
    # Get client name
    read -p "Enter the client name: " client_name
    if [ -z "$client_name" ]; then
        log "ERROR" "Client name cannot be empty"
        exit 1
    fi
    
    # Setup base directory
    local base_dir="./$client_name/nmap"
    if [ ! -d "$base_dir" ]; then
        log "ERROR" "Base directory not found: $base_dir"
        exit 1
    fi
    
    log "INFO" "Starting web service identification..."
    process_web_services "$base_dir"
    
    create_summary "$base_dir"
    log "INFO" "Web scans completed. Summary available at $base_dir/web_scan_summary.txt"
}

# Error handling
trap 'echo -e "${RED}An error occurred. Exiting...${NC}"; exit 1' ERR

# Execute main
main "$@"
#!/bin/bash

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to display banner
display_banner() {
    echo -e "${BLUE}"
    cat << "EOF"
    ██████╗ ██╗██████╗ ███████╗███████╗ █████╗ ██████╗  ██████╗██╗  ██╗
    ██╔══██╗██║██╔══██╗██╔════╝██╔════╝██╔══██╗██╔══██╗██╔════╝██║  ██║
    ██║  ██║██║██████╔╝███████╗█████╗  ███████║██████╔╝██║     ███████║
    ██║  ██║██║██╔══██╗╚════██║██╔══╝  ██╔══██║██╔══██╗██║     ██╔══██║
    ██████╔╝██║██║  ██║███████║███████╗██║  ██║██║  ██║╚██████╗██║  ██║
    ╚═════╝ ╚═╝╚═╝  ╚═╝╚══════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝
                                                                       
     ███████╗ ██████╗ █████╗ ███╗   ██╗███╗   ██╗███████╗██████╗     
     ██╔════╝██╔════╝██╔══██╗████╗  ██║████╗  ██║██╔════╝██╔══██╗    
     ███████╗██║     ███████║██╔██╗ ██║██╔██╗ ██║█████╗  ██████╔╝    
     ╚════██║██║     ██╔══██║██║╚██╗██║██║╚██╗██║██╔══╝  ██╔══██╗    
     ███████║╚██████╗██║  ██║██║ ╚████║██║ ╚████║███████╗██║  ██║    
     ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝    
EOF
    echo -e "${NC}"
}

# Function to log messages
log() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    case $level in
        "INFO") echo -e "${GREEN}[INFO]${NC} ${timestamp} - $message" ;;
        "WARN") echo -e "${YELLOW}[WARN]${NC} ${timestamp} - $message" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} ${timestamp} - $message" ;;
    esac
}

# Function to check requirements
check_requirements() {
    if ! command -v dirsearch &> /dev/null; then
        log "ERROR" "dirsearch is required but not installed."
        exit 1
    fi
    
    if [ ! -f "/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt" ]; then
        log "ERROR" "Wordlist not found. Please install dirbuster wordlists."
        exit 1
    fi
}

# Common web extensions
WEB_EXTENSIONS="php,asp,aspx,jsp,html,js,txt,conf,bak,zip,tar.gz,old"

# Function to check if a URL is actually a web service
check_web_service() {
    local url=$1
    local timeout=10
    
    log "INFO" "Checking if $url is a web service..."
    
    local status_code
    status_code=$(curl -sL --connect-timeout "$timeout" -m "$timeout" -o /dev/null -w "%{http_code}" "$url" 2>/dev/null)
    
    case "$status_code" in
        200|301|302|307|308|401|403)
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# Function to validate URL format
validate_url() {
    local url="$1"
    if [[ ! "$url" =~ ^https?:// ]]; then
        log "ERROR" "Invalid URL format: $url"
        return 1
    fi
    return 0
}

# Function to run dirsearch scan
run_single_dirsearch() {
    local url=$1
    local output_dir=$2
    local scan_id=$3
    local total_scans=$4
    
    validate_url "$url" || return 1
    
    if ! check_web_service "$url"; then
        log "WARN" "[$scan_id/$total_scans] No web service detected at $url - skipping"
        echo "No web service detected" > "$output_dir/scan_skipped.txt"
        return 0
    fi
    
    local scan_start_time=$(date '+%Y-%m-%d %H:%M:%S')
    log "INFO" "[$scan_id/$total_scans] Starting dirsearch scan for $url"
    
    # Create scan configuration and run dirsearch
    {
        echo "Scan Configuration:"
        echo "URL: $url"
        echo "Start Time: $scan_start_time"
        echo "Extensions: $WEB_EXTENSIONS"
    } > "$output_dir/scan_config.txt"

    if dirsearch -u "$url" \
        -e "$WEB_EXTENSIONS" \
        -t 10 \
        -r \
        --random-agent \
        -i 200,201,202,203,204,301,302,307,401,403 \
        -o "$output_dir/dirsearch_output.txt" \
        --format=json \
        -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt \
        --delay=0.5 \
        --timeout=10 \
        --max-rate=40 \
        --exclude-status=429 \
        --full-url \
        2>"$output_dir/error.log"
    then
        process_scan_results "$url" "$output_dir" "$scan_start_time"
        return 0
    else
        log "ERROR" "[$scan_id/$total_scans] Scan failed for $url"
        return 1
    fi
}

# New function to process scan results
process_scan_results() {
    local url=$1
    local output_dir=$2
    local scan_start_time=$3
    local scan_end_time=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Create detailed summary
    {
        echo "Scan Summary"
        echo "============"
        echo "URL: $url"
        echo "Start Time: $scan_start_time"
        echo "End Time: $scan_end_time"
        echo ""
        echo "Interesting Findings:"
        echo "===================="
    } > "$output_dir/scan_summary.txt"
    
    # Process and categorize findings
    if [ -f "$output_dir/dirsearch_output.txt" ]; then
        grep "200" "$output_dir/dirsearch_output.txt" > "$output_dir/200_ok.txt"
        grep "30[123]" "$output_dir/dirsearch_output.txt" > "$output_dir/redirects.txt"
        grep "40[13]" "$output_dir/dirsearch_output.txt" > "$output_dir/restricted.txt"
        
        {
            echo "200 OK Responses: $(wc -l < "$output_dir/200_ok.txt")"
            echo "Redirects: $(wc -l < "$output_dir/redirects.txt")"
            echo "Restricted Access: $(wc -l < "$output_dir/restricted.txt")"
            
            echo -e "\nTop Findings:"
            echo "-------------"
            head -n 10 "$output_dir/200_ok.txt"
        } >> "$output_dir/scan_summary.txt"
    fi
}

# Add this function
create_directory() {
    local dir="$1"
    if ! mkdir -p "$dir"; then
        log "ERROR" "Failed to create directory: $dir"
        return 1
    fi
}

# Add this function
check_writable() {
    local file="$1"
    local dir=$(dirname "$file")
    if [ ! -w "$dir" ]; then
        log "ERROR" "Directory not writable: $dir"
        return 1
    fi
}

# Main function to run all scans
run_dirsearch_scans() {
    local client_name="$1"
    local base_dir="./$client_name/nmap"
    
    if [ ! -d "$base_dir" ]; then
        log "ERROR" "Base directory not found: $base_dir"
        return 1
    fi
    
    # Track the number of web services found and scanned
    local web_services_found=0
    local web_services_scanned=0
    
    for protocol in tcp udp; do
        local protocol_dir="$base_dir/$protocol"
        [ ! -d "$protocol_dir" ] && continue
        
        for ip_dir in "$protocol_dir"/*; do
            [ ! -d "$ip_dir" ] && continue
            
            local ip=$(basename "$ip_dir" | tr '_' '.')
            local discovered_ports_dir="$ip_dir/Discovered_Ports"
            [ ! -d "$discovered_ports_dir" ] && continue
            
            for service_dir in "$discovered_ports_dir"/*; do
                [ ! -d "$service_dir" ] && continue
                
                local service=$(basename "$service_dir")
                if [[ "$service" =~ ^(http|https|www|ssl)$ ]]; then
                    for port_dir in "$service_dir"/*; do
                        [ ! -d "$port_dir" ] && continue
                        
                        local port=$(basename "$port_dir")
                        local dirsearch_dir="$port_dir/dirsearch"
                        create_directory "$dirsearch_dir" || continue
                        
                        local scheme="http"
                        [[ "$service" =~ ^(https|ssl)$ ]] && scheme="https"
                        local url="${scheme}://${ip}:${port}"
                        
                        ((web_services_found++))
                        
                        if check_web_service "$url"; then
                            run_single_dirsearch "$url" "$dirsearch_dir"
                            ((web_services_scanned++))
                        else
                            log "WARN" "Skipping $url - no web service detected"
                            echo "No web service detected" > "$dirsearch_dir/scan_skipped.txt"
                        fi
                    done
                fi
            done
        done
    done
    
    # Add summary to master summary file
    {
        echo "Web Services Found: $web_services_found"
        echo "Web Services Scanned: $web_services_scanned"
        echo "Web Services Skipped: $((web_services_found - web_services_scanned))"
        echo ""
    } >> "./$client_name/web_scan_summary.txt"
}

# Main execution
main() {
    display_banner
    check_requirements
    
    # Get client name
    read -p "Enter the client name: " client_name
    if [ -z "$client_name" ]; then
        log "ERROR" "Client name cannot be empty"
        exit 1
    fi
    
    # Initialize directories and summary file
    local base_dir="./$client_name"
    local master_summary="$base_dir/web_scan_summary.txt"
    
    mkdir -p "$base_dir"
    echo "Web Directory Scan Summary - $(date)" > "$master_summary"
    echo "===============================" >> "$master_summary"
    
    # Count total web services for progress tracking
    local total_services=$(find "$base_dir/nmap" -type d -name "http" -o -name "https" -o -name "ssl" | wc -l)
    local current_service=0
    
    run_dirsearch_scans "$client_name" "$total_services"
    
    log "INFO" "All web scans completed. Check $master_summary for overview."
}

# Error handling
trap 'echo -e "${RED}An error occurred. Exiting...${NC}"; exit 1' ERR

# Execute main
main "$@"
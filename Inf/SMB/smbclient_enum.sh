#!/bin/bash

# ANSI color codes for consistent styling
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to log messages
log() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    case $level in
        "INFO") echo -e "${GREEN}[INFO]${NC} ${timestamp} - $message" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} ${timestamp} - $message" ;;
        "WARN") echo -e "${YELLOW}[WARN]${NC} ${timestamp} - $message" ;;
    esac
}

# Function to recursively download files from SMB share
download_share() {
    local ip=$1
    local share=$2
    local output_dir=$3
    local smbclient_cmd=$4
    
    # Create share directory
    mkdir -p "$output_dir/$share"
    
    # Change to the share directory before downloading
    cd "$output_dir/$share"
    
    log "INFO" "Attempting to download files from //$ip/$share"
    
    # Execute smbclient with recursive download
    eval "$smbclient_cmd '//$ip/$share' -c 'recurse;prompt;mget *'" 2>/dev/null
    
    cd - > /dev/null
}

# Prompt for the client name
read -p "Enter the client name: " client_name

# Prompt for credentials
read -p "Enter username (leave empty for anonymous): " username
read -s -p "Enter password (leave empty for anonymous): " password
echo # New line after password input

# Build smbclient command with optional credentials
smbclient_cmd="smbclient"
if [ ! -z "$username" ]; then
    if [ ! -z "$password" ]; then
        smbclient_cmd="$smbclient_cmd -U '$username%$password'"
    else
        smbclient_cmd="$smbclient_cmd -U '$username'"
    fi
else
    smbclient_cmd="$smbclient_cmd -N" # No password (anonymous)
fi

# Base directory for the structure
base_dir="./$client_name/nmap/tcp"

# Check if the base directory exists
if [ ! -d "$base_dir" ]; then
    log "ERROR" "Base directory not found: $base_dir"
    exit 1
fi

# Ask if user wants to download files
read -p "Do you want to download files from accessible shares? (y/n): " download_files

# Iterate over each IP directory
for ip_dir in "$base_dir"/*; do
    # Check if it's a directory
    if [ -d "$ip_dir" ]; then
        # Extract the IP address from the directory name
        ip=$(basename "$ip_dir" | tr '_' '.')
        
        # Path to the discovered ports directory
        discovered_ports="$ip_dir/Discovered_Ports"
        
        # Check for SMB-related services (netbios-ssn or microsoft-ds)
        if [ -d "$discovered_ports/netbios-ssn" ] || [ -d "$discovered_ports/microsoft-ds" ]; then
            # Create smbclient directory in the appropriate service folder
            if [ -d "$discovered_ports/microsoft-ds/445" ]; then
                smb_dir="$discovered_ports/microsoft-ds/445/smbclient"
            elif [ -d "$discovered_ports/netbios-ssn/139" ]; then
                smb_dir="$discovered_ports/netbios-ssn/139/smbclient"
            else
                continue
            fi
            
            mkdir -p "$smb_dir"
            
            # Run smbclient on the IP
            log "INFO" "Running smbclient list shares on $ip"
            
            # Create output files for different formats
            eval "$smbclient_cmd -L //$ip/ -g" > "$smb_dir/shares_grepable.txt" 2>/dev/null
            eval "$smbclient_cmd -L //$ip/" > "$smb_dir/shares_readable.txt" 2>/dev/null
            
            # Check if the listing was successful
            if [ $? -eq 0 ]; then
                log "INFO" "SMB shares enumeration completed for $ip"
                log "INFO" "Results saved in $smb_dir/"
                
                # If user wants to download files
                if [[ "$download_files" =~ ^[Yy]$ ]]; then
                    # Create downloads directory
                    downloads_dir="$smb_dir/downloads"
                    mkdir -p "$downloads_dir"
                    
                    # Parse shares from grepable output
                    while IFS='|' read -r type share description; do
                        if [ "$type" = "Disk" ] && [[ "$share" != "ADMIN$" && "$share" != "C$" && "$share" != "IPC$" ]]; then
                            log "INFO" "Processing share: $share"
                            download_share "$ip" "$share" "$downloads_dir" "$smbclient_cmd"
                        fi
                    done < <(grep "Disk|" "$smb_dir/shares_grepable.txt")
                fi
            else
                log "WARN" "Failed to enumerate shares on $ip"
            fi
        fi
    fi
done

log "INFO" "SMB enumeration completed for all hosts." 
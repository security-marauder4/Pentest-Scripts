#!/bin/bash

# Check if the user has provided an input file
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 ip_list.txt"
    exit 1
fi

# Prompt for the client name
read -p "Enter the client name: " client_name

# Assign the first argument to the variable 'file'
file=$1

# Check if the file exists
if [ ! -f "$file" ]; then
    echo "File not found!"
    exit 1
fi

# Base directory for the structure
base_dir="./$client_name/nmap/tcp"

# Read the file line by line
while IFS= read -r ip
do
    # Skip empty lines
    if [ -z "$ip" ]; then
        continue
    fi

    # Replace dots in IP address with underscores for the filename
    filename=$(echo "$ip" | tr '.' '_')

    # Create a directory for the IP under the relevant base directory
    ip_dir="$base_dir/$filename"
    mkdir -p "$ip_dir"

    # Perform nmap scan on all TCP ports for the given IP and save the output to a file
    echo "Scanning IP: $ip"
    nmap -sS -sC -sV -p0- -vv vv-oA "$ip_dir/output_$filename" "$ip"

    # Create a directory for discovered ports
    discovered_ports_dir="$ip_dir/Discovered_Ports"
    mkdir -p "$discovered_ports_dir" || { echo "Failed to create directory $discovered_ports_dir"; exit 1; }

    # Since the output is already saved, we can directly read from the file for further processing
    grep 'tcp' "$ip_dir/output_$filename.nmap" | grep 'open' | while read -r line
    do
        echo "Processing line: $line"  # Debug statement
        port=$(echo "$line" | awk '{print $1}' | cut -d'/' -f1)
        service=$(echo "$line" | awk '{print $3}')
        service_name=$(echo "$service" | cut -d'/' -f1)  # Extract the service name
        service_dir="$discovered_ports_dir/$service_name"  # Directory for the service
        port_dir="$service_dir/$port"  # Directory for the port under the service directory
        mkdir -p "$port_dir" || { echo "Failed to create directory for $service at $port_dir"; continue; }
        echo "Directory created for $service at $port_dir"  # Debug statement
    done
done < "$file"

echo "Nmap scan completed. Results saved to individual output files and directories for services."

# Function to run dirsearch scans
run_dirsearch_scans() {
    for protocol in tcp udp; do
        protocol_dir="$base_dir/$protocol"
        if [ ! -d "$protocol_dir" ]; then
            echo "Protocol directory $protocol_dir not found!"
            continue
        fi

        for ip_dir in "$protocol_dir"/*
        do
            if [ -d "$ip_dir" ]; then
                ip=$(basename "$ip_dir" | tr '_' '.')
                for service_dir in "$ip_dir/Discovered_Ports"/*
                do
                    if [ -d "$service_dir" ]; then
                        protocol=$(basename "$service_dir")
                        for port_dir in "$service_dir"/*
                        do
                            if [ -d "$port_dir" ]; then
                                port=$(basename "$port_dir")
                                dirsearch_dir="$port_dir/dirsearch"
                                mkdir -p "$dirsearch_dir"
                                url="$protocol://$ip:$port"
                                echo "Running dirsearch on $url"
                                dirsearch -u "$url" -o "$dirsearch_dir/dirsearch_output.txt"
                                echo "Dirsearch output saved to $dirsearch_dir/dirsearch_output.txt"
                            fi
                        done
                    fi
                done
            fi
        done
    done
}

# Function to run whatweb scans
run_whatweb_scans() {
    for protocol in tcp udp; do
        protocol_dir="$base_dir/$protocol"
        if [ ! -d "$protocol_dir" ]; then
            echo "Protocol directory $protocol_dir not found!"
            continue
        fi

        for ip_dir in "$protocol_dir"/*
        do
            if [ -d "$ip_dir" ]; then
                ip=$(basename "$ip_dir" | tr '_' '.')
                for service_dir in "$ip_dir/Discovered_Ports"/*
                do
                    if [ -d "$service_dir" ]; then
                        for port_dir in "$service_dir"/*
                        do
                            if [ -d "$port_dir" ]; then
                                port=$(basename "$port_dir")
                                whatweb_dir="$port_dir/whatweb"
                                mkdir -p "$whatweb_dir"
                                url="http://$ip:$port"
                                echo "Running whatweb on $url"
                                whatweb -a 3 "$url" > "$whatweb_dir/whatweb_output.txt"
                                echo "WhatWeb output saved to $whatweb_dir/whatweb_output.txt"
                            fi
                        done
                    fi
                done
            fi
        done
    done
}

# Function to run nikto scans
run_nikto_scans() {
    for protocol in tcp udp; do
        protocol_dir="$base_dir/$protocol"
        if [ ! -d "$protocol_dir" ]; then
            echo "Protocol directory $protocol_dir not found!"
            continue
        fi

        for ip_dir in "$protocol_dir"/*
        do
            if [ -d "$ip_dir" ]; then
                ip=$(basename "$ip_dir" | tr '_' '.')
                for service_dir in "$ip_dir/Discovered_Ports"/*
                do
                    if [ -d "$service_dir" ]; then
                        for port_dir in "$service_dir"/*
                        do
                            if [ -d "$port_dir" ]; then
                                port=$(basename "$port_dir")
                                nikto_dir="$port_dir/nikto"
                                mkdir -p "$nikto_dir"
                                url="http://$ip:$port"
                                echo "Running nikto on $url with a timeout of 10 minutes"
                                timeout 10m nikto -h "$url" -ssl > "$nikto_dir/nikto_output.txt"
                                if [ $? -eq 124 ]; then
                                    echo "Nikto scan for $url timed out after 10 minutes"
                                else
                                    echo "Nikto output saved to $nikto_dir/nikto_output.txt"
                                fi
                            fi
                        done
                    fi
                done
            fi
        done
    done
}

# Function to run SSL scans
run_ssl_scans() {
    for protocol in tcp udp; do
        protocol_dir="$base_dir/$protocol"
        if [ ! -d "$protocol_dir" ]; then
            echo "Protocol directory $protocol_dir not found!"
            continue
        fi

        for ip_dir in "$protocol_dir"/*
        do
            # Check if it's a directory
            if [ -d "$ip_dir" ]; then
                # Extract the IP address from the directory name
                ip=$(basename "$ip_dir" | tr '_' '.')

                # Iterate over each service directory
                for service_dir in "$ip_dir/Discovered_Ports"/*
                do
                    # Check if it's a directory
                    if [ -d "$service_dir" ]; then
                        # Iterate over each port directory
                        for port_dir in "$service_dir"/*
                        do
                            # Check if it's a directory
                            if [ -d "$port_dir" ]; then
                                # Extract the port number from the directory name
                                port=$(basename "$port_dir")

                                # Create a subdirectory named 'sslscan' within the port directory
                                sslscan_dir="$port_dir/sslscan"
                                mkdir -p "$sslscan_dir"

                                # Run sslscan on the IP:PORT combination
                                echo "Running sslscan on $ip:$port"
                                sslscan "$ip:$port" > "$sslscan_dir/sslscan_output.txt"
                                echo "SSL scan output saved to $sslscan_dir/sslscan_output.txt"

                                # Create a subdirectory named 'testssl' within the port directory
                                testssl_dir="$port_dir/testssl"
                                mkdir -p "$testssl_dir"

                                # Run testssl on the IP:PORT combination
                                echo "Running testssl on $ip:$port"
                                testssl "$ip:$port" > "$testssl_dir/testssl_output.txt"
                                echo "TestSSL output saved to $testssl_dir/testssl_output.txt"
                            fi
                        done
                    fi
                done
            fi
        done
    done
}

# Run all scans in sequence
run_dirsearch_scans
run_whatweb_scans
run_nikto_scans
run_ssl_scans

echo "All scans (Nmap, Dirsearch, WhatWeb, Nikto, SSLscan, TestSSL) completed for all IP:PORT combinations."
import re
import csv
import sys

# List of cleartext protocols to check
CLEAR_TEXT_PROTOCOLS = [
    'smtp', 'imap', 'pop3', 'telnet', 'http', 'ftp', 'tftp', 'netbios', 'snmp', 'sqlnet'
]

def parse_juniper_config(file_path):
    # Read the configuration file
    with open(file_path, 'r') as file:
        config_text = file.read()
    
    # Updated regex pattern to optionally match the zones and handle multiple source addresses
    pattern = re.compile(
        r'(?:from-zone\s+(\S+)\s+to-zone\s+(\S+)\s*)?{\s*policy\s+(\S+)\s*{\s*match\s*{\s*source-address\s+(\[.*?\]|\S+);\s*destination-address\s+(\S+);\s*application\s+(\S+);\s*(?:dynamic-application\s+(\S+);\s*)?}\s*then\s*{\s*(\S+);',
        re.DOTALL
    )
    
    # Find all matches in the configuration text
    matches = pattern.findall(config_text)
    
    # Prepare the data for CSV
    csv_data = [["From Zone", "To Zone", "Rule Name", "Source Address", "Destination Address", "Application", "Dynamic Application", "Action", "Cleartext Protocol"]]
    for match in matches:
        from_zone, to_zone, rule_name, src_addr, dst_addr, app, dyn_app, action = match
        cleartext_protocol = next((protocol for protocol in CLEAR_TEXT_PROTOCOLS if protocol in app.lower()), "None")
        csv_data.append([
            from_zone if from_zone else "NA",
            to_zone if to_zone else "NA",
            rule_name, src_addr, dst_addr, app, dyn_app if dyn_app else "NA", action, cleartext_protocol
        ])
    
    return csv_data

def write_to_csv(data, filename):
    with open(filename, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(data)

# Main execution
if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python3 cleartext_check.py <configfile> <csvfile>")
        sys.exit(1)
    
    config_file_path = sys.argv[1]
    csv_output_path = sys.argv[2]

    # Parse the configuration file
    csv_data = parse_juniper_config(config_file_path)
    
    # Write the rules with cleartext protocols to CSV
    write_to_csv(csv_data, csv_output_path)
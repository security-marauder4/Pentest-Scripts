import json
import csv
from datetime import datetime
import argparse
import sys
import os

class FirewallAnalyzer:
    def __init__(self, device_name):
        self.device_name = device_name
        self.clear_text_ports = {
            '20': 'FTP-Data',
            '21': 'FTP-Control',
            '23': 'Telnet',
            '25': 'SMTP',
            '69': 'TFTP',
            '80': 'HTTP',
            '110': 'POP3',
            '119': 'NNTP',
            '143': 'IMAP',
            '161': 'SNMP-Query',
            '162': 'SNMP-Trap',
            '389': 'LDAP',
            '513': 'Rlogin',
            '514': 'Rsh/RCP'
        }
        
        self.management_ports = {
            '22': 'SSH',
            '23': 'Telnet',
            '80': 'HTTP-Mgmt',
            '88': 'Kerberos',
            '161': 'SNMP-Query',
            '162': 'SNMP-Trap',
            '389': 'LDAP',
            '443': 'HTTPS-Mgmt',
            '445': 'SMB',
            '514': 'Syslog',
            '3389': 'RDP',
            '5900': 'VNC',
            '137': 'NetBIOS-Name',
            '138': 'NetBIOS-Datagram',
            '139': 'NetBIOS-Session'
        }
        
        self.headers = ["Rule Name", "Source", "Destination", "Service(s)", "Device", "Comment (if applicable)"]

    def _check_subnet_size(self, cidr):
        if 'Any' in cidr:
            return True
        for addr in cidr.split(','):
            if '/' in addr:
                try:
                    subnet = addr.split('/')[1]
                    if int(subnet) < 24:
                        return True
                except:
                    pass
        return False

    def analyze_rules(self, json_data: str):
        data = json.loads(json_data)
        
        findings = {
            "Rules_Allowing_Access_To_Cleartext_Protocols": [],
            "Firewall_Rules_Allowing_Access_to_Management_Protocols": [],
            "Overly_Permissive_Rules": [],
            "Overly_Permissive_IP_Ranges": [],
            "Logging_Not_Configured": []
        }

        for rule in data['rules']:
            # Check for clear text protocols
            if rule['policy'] == 'allow':
                ports = str(rule['destPort']).split(',')
                for port in ports:
                    # Handle port ranges
                    if '-' in port:
                        start, end = map(int, port.split('-'))
                        port_range = map(str, range(start, end + 1))
                    else:
                        port_range = [port]

                    for single_port in port_range:
                        if single_port in self.clear_text_ports:
                            findings["Rules_Allowing_Access_To_Cleartext_Protocols"].append([
                                rule['comment'] or 'No Name',
                                rule['srcCidr'],
                                rule['destCidr'],
                                f"{rule['protocol'].upper()} {single_port} ({self.clear_text_ports[single_port]})",
                                self.device_name,
                                "Clear text protocol allowed"
                            ])

                        # Check management ports
                        if single_port in self.management_ports:
                            findings["Firewall_Rules_Allowing_Access_to_Management_Protocols"].append([
                                rule['comment'] or 'No Name',
                                rule['srcCidr'],
                                rule['destCidr'],
                                f"{rule['protocol'].upper()} {single_port} ({self.management_ports[single_port]})",
                                self.device_name,
                                "Management port exposed"
                            ])

            # Check for overly permissive rules
            if (rule['policy'] == 'allow' and 
                (rule['protocol'].lower() == 'any' or 
                 rule['destPort'] == 'Any' or 
                 rule['srcCidr'] == 'Any' or 
                 rule['destCidr'] == 'Any')):
                findings["Overly_Permissive_Rules"].append([
                    rule['comment'] or 'No Name',
                    rule['srcCidr'],
                    rule['destCidr'],
                    f"{rule['protocol'].upper()} {rule['destPort']}",
                    self.device_name,
                    "Overly permissive configuration"
                ])

            # Check for broad subnets
            if self._check_subnet_size(rule['srcCidr']) or self._check_subnet_size(rule['destCidr']):
                findings["Overly_Permissive_IP_Ranges"].append([
                    rule['comment'] or 'No Name',
                    rule['srcCidr'],
                    rule['destCidr'],
                    f"{rule['protocol'].upper()} {rule['destPort']}",
                    self.device_name,
                    "Subnet broader than /24"
                ])

            # Check for logging
            if not rule['syslogEnabled']:
                findings["Logging_Not_Configured"].append([
                    rule['comment'] or 'No Name',
                    rule['srcCidr'],
                    rule['destCidr'],
                    f"{rule['protocol'].upper()} {rule['destPort']}",
                    self.device_name,
                    "Logging not enabled"
                ])

        return findings

def export_to_csv(findings, headers, device_name, output_dir):
    # Create output directory if it doesn't exist
    output_dir = f"{output_dir}/{device_name}_firewall_review"
    os.makedirs(output_dir, exist_ok=True)
    
    for category, rules in findings.items():
        if rules:
            filename = f"{output_dir}/{device_name}_{category.lower()}.csv"
            with open(filename, 'w', newline='') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(headers)
                writer.writerows(rules)
            print(f"Created: {filename}")

def main():
    parser = argparse.ArgumentParser(description='Analyze firewall rules for security vulnerabilities')
    parser.add_argument('input_file', help='Path to the firewall rules file (.txt or .json)')
    parser.add_argument('--output-dir', help='Directory to store CSV files', default='firewall_analysis')
    
    args = parser.parse_args()

    try:
        # Get device name from filename (without extension and path)
        device_name = os.path.splitext(os.path.basename(args.input_file))[0]
        print(f"Analyzing device: {device_name}")
        
        # Read the file
        with open(args.input_file, 'r') as f:
            json_data = f.read()
        
        # Run the analysis with the device name
        analyzer = FirewallAnalyzer(device_name)
        findings = analyzer.analyze_rules(json_data)
        
        # Export results
        export_to_csv(findings, analyzer.headers, device_name, args.output_dir)
        
        print("\nAnalysis complete! CSV files have been created for each vulnerability category.")
        print(f"Results can be found in the '{args.output_dir}' directory.")
        
    except FileNotFoundError:
        print(f"Error: Could not find file '{args.input_file}'")
        sys.exit(1)
    except json.JSONDecodeError:
        print(f"Error: File '{args.input_file}' does not contain valid JSON data")
        sys.exit(1)
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
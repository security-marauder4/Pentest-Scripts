import os
import subprocess
import argparse
import re
import json

def show_help():
    print("Usage: WebApp.py [-h] ip_list.txt")
    print("\nOptions:")
    print("  -h        Show this help message and exit")
    print("\nArguments:")
    print("  ip_list.txt  Path to the file containing the list of IP addresses")
    print("\nDescription:")
    print("  This tool performs a series of penetration testing scans on a list of IP addresses.")
    print("  It first checks if an Nmap scan has already been completed for each IP address.")
    print("  If the Nmap scan exists, it skips the scan and processes the existing output.")
    print("  The tool then runs additional scans using Dirsearch, WhatWeb, Nikto, SSLscan, and TestSSL.")
    print("  The results of each scan are saved in a structured directory format for easy access and review.")
    print("\nSteps:")
    print("  1. Runs an Nmap scan checking all ports including port 0.")
    print("  2. Creates a folder structure for each service and subsequent ports.")
    print("  3. Runs Dirsearch, Nikto, WhatWeb, SSLscan, and TestSSL scans on the discovered services and ports.")
    print("  4. Parses Nikto output files to extract vulnerabilities and save them in a readable format.")

def run_command(command, output_file=None):
    try:
        result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if output_file:
            with open(output_file, 'w') as f:
                f.write(result.stdout.decode())
        return result.stdout.decode()
    except subprocess.CalledProcessError as e:
        print(f"Command '{command}' failed with error: {e.stderr.decode()}")
        return None

def nmap_scan(ip, ip_dir, filename):
    nmap_output_file = os.path.join(ip_dir, f"output_{filename}.nmap")
    if os.path.isfile(nmap_output_file):
        print(f"Nmap scan for IP: {ip} already exists. Skipping Nmap scan.")
    else:
        print(f"Scanning IP: {ip}")
        command = f"nmap -sS -sC -sV -p0- -vv -oA {nmap_output_file} {ip}"
        run_command(command)
        # Save results to JSON
        results = parse_nmap_output(nmap_output_file)
        save_results(results, os.path.join(ip_dir, f"output_{filename}.json"))

def parse_nmap_output(nmap_output_file):
    results = []
    with open(nmap_output_file, 'r') as f:
        for line in f:
            if 'tcp' in line and 'open' in line:
                port = line.split('/')[0]
                service = line.split()[2]
                results.append({"port": port, "service": service})
    return results

def process_nmap_output(ip_dir, filename):
    nmap_output_file = os.path.join(ip_dir, f"output_{filename}.nmap")
    discovered_ports_dir = os.path.join(ip_dir, "Discovered_Ports")
    os.makedirs(discovered_ports_dir, exist_ok=True)

    with open(nmap_output_file, 'r') as f:
        for line in f:
            if 'tcp' in line and 'open' in line:
                print(f"Processing line: {line.strip()}")
                port = line.split('/')[0]
                service = line.split()[2]
                service_name = service.split('/')[0]
                service_dir = os.path.join(discovered_ports_dir, service_name)
                port_dir = os.path.join(service_dir, port)
                os.makedirs(port_dir, exist_ok=True)
                print(f"Directory created for {service} at {port_dir}")

def run_dirsearch_scans(base_dir):
    results = []
    for protocol in ['tcp', 'udp']:
        protocol_dir = os.path.join(base_dir, protocol)
        if not os.path.isdir(protocol_dir):
            print(f"Protocol directory {protocol_dir} not found!")
            continue

        for ip_dir in os.listdir(protocol_dir):
            ip_path = os.path.join(protocol_dir, ip_dir)
            if os.path.isdir(ip_path):
                ip = ip_dir.replace('_', '.')
                for service_dir in os.listdir(os.path.join(ip_path, "Discovered_Ports")):
                    service_path = os.path.join(ip_path, "Discovered_Ports", service_dir)
                    if os.path.isdir(service_path):
                        for port_dir in os.listdir(service_path):
                            port_path = os.path.join(service_path, port_dir)
                            if os.path.isdir(port_path):
                                port = port_dir
                                dirsearch_dir = os.path.join(port_path, "dirsearch")
                                os.makedirs(dirsearch_dir, exist_ok=True)
                                url = f"{protocol}://{ip}:{port}"
                                print(f"Running dirsearch on {url}")
                                command = f"dirsearch -u {url} -o {os.path.join(dirsearch_dir, 'dirsearch_output.txt')}"
                                run_command(command)
                                # Save results to JSON
                                directories = parse_dirsearch_output(os.path.join(dirsearch_dir, 'dirsearch_output.txt'))
                                results.append({"url": url, "port": port, "directories": directories})
    save_results(results, os.path.join(base_dir, "dirsearch_results.json"))

def parse_dirsearch_output(dirsearch_output_file):
    directories = []
    with open(dirsearch_output_file, 'r') as f:
        for line in f:
            if '[200]' in line:
                directories.append(line.split('[200] ')[-1].strip())
    return directories

def run_dirsearch_parsing(base_dir, client_name):
    vulnerabilities_dir = os.path.join(".", client_name, "vulnerabilities")
    os.makedirs(vulnerabilities_dir, exist_ok=True)

    output_txt = os.path.join(vulnerabilities_dir, "dirsearch_results.txt")
    output_json = os.path.join('results', 'dirsearch_results.json')
    results = []

    with open(output_txt, 'w') as f:
        f.write("Directories Report\n")
        f.write("==================\n")

    for protocol in ['tcp', 'udp']:
        protocol_dir = os.path.join(base_dir, protocol)
        if not os.path.isdir(protocol_dir):
            print(f"Protocol directory {protocol_dir} not found!")
            continue

        for url_dir in os.listdir(protocol_dir):
            url_path = os.path.join(protocol_dir, url_dir)
            if os.path.isdir(url_path):
                for service_dir in os.listdir(os.path.join(url_path, "Discovered_Ports")):
                    service_path = os.path.join(url_path, "Discovered_Ports", service_dir)
                    if os.path.isdir(service_path):
                        for port_dir in os.listdir(service_path):
                            port_path = os.path.join(service_path, port_dir)
                            if os.path.isdir(port_path):
                                dirsearch_dir = os.path.join(port_path, "dirsearch")
                                dirsearch_output_file = os.path.join(dirsearch_dir, "dirsearch_output.txt")
                                if os.path.isfile(dirsearch_output_file):
                                    directories = parse_dirsearch_output(dirsearch_output_file, output_txt)
                                    results.append({
                                        "url": url_dir,
                                        "port": port_dir,
                                        "directories": directories
                                    })
                                else:
                                    print(f"Dirsearch output file {dirsearch_output_file} not found!")

    save_results(results, output_json)
    print(f"Dirsearch output parsing completed for all URL:PORT combinations.")
    print(f"Directories report saved to {output_txt}")
    print(f"JSON results saved to {output_json}")

def parse_dirsearch_output(dirsearch_output_file, directories_file):
    print(f"Parsing Dirsearch output from {dirsearch_output_file}")

    directories = []
    with open(dirsearch_output_file, 'r') as f:
        for line in f:
            if '[200]' in line:
                directories.append(line.split('[200] ')[-1].strip())

    if directories:
        url = os.path.basename(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(dirsearch_output_file))))))
        port = os.path.basename(os.path.dirname(os.path.dirname(dirsearch_output_file)))

        with open(directories_file, 'a') as f:
            f.write(f"URL: {url}\n")
            f.write(f"Port: {port}\n")
            f.write("Discovered Directories:\n")
            for directory in directories:
                f.write(f"  - {directory}\n")
            f.write("----------------------------------------\n")

    print(f"Discovered directories saved to {directories_file}")
    return directories

def run_whatweb_scans(base_dir):
    results = []
    for protocol in ['tcp', 'udp']:
        protocol_dir = os.path.join(base_dir, protocol)
        if not os.path.isdir(protocol_dir):
            print(f"Protocol directory {protocol_dir} not found!")
            continue

        for ip_dir in os.listdir(protocol_dir):
            ip_path = os.path.join(protocol_dir, ip_dir)
            if os.path.isdir(ip_path):
                ip = ip_dir.replace('_', '.')
                for service_dir in os.listdir(os.path.join(ip_path, "Discovered_Ports")):
                    service_path = os.path.join(ip_path, "Discovered_Ports", service_dir)
                    if os.path.isdir(service_path):
                        for port_dir in os.listdir(service_path):
                            port_path = os.path.join(service_path, port_dir)
                            if os.path.isdir(port_path):
                                port = port_dir
                                whatweb_dir = os.path.join(port_path, "whatweb")
                                os.makedirs(whatweb_dir, exist_ok=True)
                                url = f"http://{ip}:{port}"
                                print(f"Running whatweb on {url}")
                                command = f"whatweb -a 3 {url} > {os.path.join(whatweb_dir, 'whatweb_output.txt')}"
                                run_command(command)
                                # Save results to JSON
                                results.append({"url": url, "port": port, "output": os.path.join(whatweb_dir, 'whatweb_output.txt')})
    save_results(results, os.path.join(base_dir, "whatweb_results.json"))

def run_nikto_scans(base_dir):
    results = []
    for protocol in ['tcp', 'udp']:
        protocol_dir = os.path.join(base_dir, protocol)
        if not os.path.isdir(protocol_dir):
            print(f"Protocol directory {protocol_dir} not found!")
            continue

        for ip_dir in os.listdir(protocol_dir):
            ip_path = os.path.join(protocol_dir, ip_dir)
            if os.path.isdir(ip_path):
                ip = ip_dir.replace('_', '.')
                for service_dir in os.listdir(os.path.join(ip_path, "Discovered_Ports")):
                    service_path = os.path.join(ip_path, "Discovered_Ports", service_dir)
                    if os.path.isdir(service_path):
                        for port_dir in os.listdir(service_path):
                            port_path = os.path.join(service_path, port_dir)
                            if os.path.isdir(port_path):
                                port = port_dir
                                nikto_dir = os.path.join(port_path, "nikto")
                                os.makedirs(nikto_dir, exist_ok=True)
                                url = f"http://{ip}:{port}"
                                print(f"Running nikto on {url} with a timeout of 10 minutes")
                                command = f"timeout 10m nikto -h {url} -ssl > {os.path.join(nikto_dir, 'nikto_output.txt')}"
                                result = run_command(command)
                                if result is None:
                                    print(f"Nikto scan for {url} timed out after 10 minutes")
                                else:
                                    print(f"Nikto output saved to {os.path.join(nikto_dir, 'nikto_output.txt')}")
                                    # Save results to JSON
                                    results.append({"url": url, "port": port, "output": os.path.join(nikto_dir, 'nikto_output.txt')})
    save_results(results, os.path.join(base_dir, "nikto_results.json"))

def run_ssl_scans(base_dir):
    results = []
    for protocol in ['tcp', 'udp']:
        protocol_dir = os.path.join(base_dir, protocol)
        if not os.path.isdir(protocol_dir):
            print(f"Protocol directory {protocol_dir} not found!")
            continue

        for ip_dir in os.listdir(protocol_dir):
            ip_path = os.path.join(protocol_dir, ip_dir)
            if os.path.isdir(ip_path):
                ip = ip_dir.replace('_', '.')
                for service_dir in os.listdir(os.path.join(ip_path, "Discovered_Ports")):
                    service_path = os.path.join(ip_path, "Discovered_Ports", service_dir)
                    if os.path.isdir(service_path):
                        for port_dir in os.listdir(service_path):
                            port_path = os.path.join(service_path, port_dir)
                            if os.path.isdir(port_path):
                                port = port_dir
                                sslscan_dir = os.path.join(port_path, "sslscan")
                                os.makedirs(sslscan_dir, exist_ok=True)
                                print(f"Running sslscan on {ip}:{port}")
                                command = f"sslscan {ip}:{port} > {os.path.join(sslscan_dir, 'sslscan_output.txt')}"
                                run_command(command)
                                print(f"SSL scan output saved to {os.path.join(sslscan_dir, 'sslscan_output.txt')}")
                                # Save results to JSON
                                results.append({"ip": ip, "port": port, "output": os.path.join(sslscan_dir, 'sslscan_output.txt')})

                                testssl_dir = os.path.join(port_path, "testssl")
                                os.makedirs(testssl_dir, exist_ok=True)
                                print(f"Running testssl on {ip}:{port}")
                                command = f"testssl {ip}:{port} > {os.path.join(testssl_dir, 'testssl_output.txt')}"
                                run_command(command)
                                print(f"TestSSL output saved to {os.path.join(testssl_dir, 'testssl_output.txt')}")
                                # Save results to JSON
                                results.append({"ip": ip, "port": port, "output": os.path.join(testssl_dir, 'testssl_output.txt')})
    save_results(results, os.path.join(base_dir, "sslscan_results.json"))

def parse_nikto_output(nikto_output_file, vulnerabilities_file):
    print(f"Parsing Nikto output from {nikto_output_file}")

    keywords = [
        'OSVDB', 'vulnerable', 'XSS', 'Cross Site Scripting', 'header', 'leaks',
        'x-powered-by', 'access-control-allow-origin', 'X-Frame-Options',
        'Strict-Transport-Security', 'X-Content-Type-Options', 'wildcard certificate',
        'SQL Injection', 'Directory Listing', 'Server Version', 'Sensitive Information',
        'Insecure', 'Weak', 'Misconfiguration', 'Exposure', 'Disclosure', 'Server:'
    ]

    pattern = re.compile('|'.join(keywords), re.IGNORECASE)

    vulnerabilities = []
    with open(nikto_output_file, 'r') as f:
        for line in f:
            if pattern.search(line):
                vulnerabilities.append(line.strip().lstrip('+ '))

    if vulnerabilities:
        url = os.path.basename(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(nikto_output_file))))))
        port = os.path.basename(os.path.dirname(os.path.dirname(nikto_output_file)))

        with open(vulnerabilities_file, 'a') as f:
            f.write(f"URL: {url}\n")
            f.write(f"Port: {port}\n")
            f.write("Vulnerabilities:\n")
            for vulnerability in vulnerabilities:
                f.write(f"  - {vulnerability}\n")
            f.write("----------------------------------------\n")

    print(f"Vulnerabilities saved to {vulnerabilities_file}")

def run_nikto_parsing(base_dir, client_name):
    vulnerabilities_dir = os.path.join(".", client_name, "vulnerabilities")
    os.makedirs(vulnerabilities_dir, exist_ok=True)

    output_txt = os.path.join(vulnerabilities_dir, "nikto_vulns.txt")
    with open(output_txt, 'w') as f:
        f.write("Vulnerabilities Report\n")
        f.write("======================\n")

    for protocol in ['tcp', 'udp']:
        protocol_dir = os.path.join(base_dir, protocol)
        if not os.path.isdir(protocol_dir):
            print(f"Protocol directory {protocol_dir} not found!")
            continue

        for url_dir in os.listdir(protocol_dir):
            url_path = os.path.join(protocol_dir, url_dir)
            if os.path.isdir(url_path):
                for service_dir in os.listdir(os.path.join(url_path, "Discovered_Ports")):
                    service_path = os.path.join(url_path, "Discovered_Ports", service_dir)
                    if os.path.isdir(service_path):
                        for port_dir in os.listdir(service_path):
                            port_path = os.path.join(service_path, port_dir)
                            if os.path.isdir(port_path):
                                nikto_dir = os.path.join(port_path, "nikto")
                                nikto_output_file = os.path.join(nikto_dir, "nikto_output.txt")
                                if os.path.isfile(nikto_output_file):
                                    parse_nikto_output(nikto_output_file, output_txt)
                                else:
                                    print(f"Nikto output file {nikto_output_file} not found!")

    print(f"Nikto output parsing completed for all URL:PORT combinations.")
    print(f"Vulnerabilities report saved to {output_txt}")

def print_banner():
    banner = r"""
 /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\ 
( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )
 > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ < 
 /\_/\   .______    _______ .__   __. .___________. _______     _______.___________.   .______    _______   ______   .______    __       _______    /\_/\ 
( o.o )  |   _  \  |   ____||  \ |  | |           ||   ____|   /       |           |   |   _  \  |   ____| /  __  \  |   _  \  |  |     |   ____|  ( o.o )
 > ^ <   |  |_)  | |  |__   |   \|  | `---|  |----`|  |__     |   (----`---|  |----`   |  |_)  | |  |__   |  |  |  | |  |_)  | |  |     |  |__      > ^ < 
 /\_/\   |   ___/  |   __|  |  . `  |     |  |     |   __|     \   \       |  |        |   ___/  |   __|  |  |  |  | |   ___/  |  |     |   __|     /\_/\ 
( o.o )  |  |      |  |____ |  |\   |     |  |     |  |____.----)   |      |  |        |  |      |  |____ |  `--'  | |  |      |  `----.|  |____   ( o.o )
 > ^ <   | _|      |_______||__| \__|     |__|     |_______|_______/       |__|        | _|      |_______| \______/  | _|      |_______||_______|   > ^ < 
 /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\ 
( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )
 > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <          
 
     /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\ 
( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )
 > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ < 
 /\_/\   ____    __    ____  _______ .______           ___      .______   .______      .___________.  ______     ______    __         /\_/\ 
( o.o )  \   \  /  \  /   / |   ____||   _  \         /   \     |   _  \  |   _  \     |           | /  __  \   /  __  \  |  |       ( o.o )
 > ^ <    \   \/    \/   /  |  |__   |  |_)  |       /  ^  \    |  |_)  | |  |_)  |    `---|  |----`|  |  |  | |  |  |  | |  |        > ^ < 
 /\_/\     \            /   |   __|  |   _  <       /  /_\  \   |   ___/  |   ___/         |  |     |  |  |  | |  |  |  | |  |        /\_/\ 
( o.o )     \    /\    /    |  |____ |  |_)  |     /  _____  \  |  |      |  |             |  |     |  `--'  | |  `--'  | |  `----.  ( o.o )
 > ^ <       \__/  \__/     |_______||______/     /__/     \__\ | _|      | _|             |__|      \______/   \______/  |_______|   > ^ < 
 /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\  /\_/\ 
( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )( o.o )
 > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ <  > ^ < 
    """
    print(f"\033[92m{banner}\033[0m")  # Print banner in green

def save_results(data, filename):
    with open(filename, 'w') as f:
        json.dump(data, f, indent=4)

def main():
    print_banner()
    parser = argparse.ArgumentParser(description="Run pentest scans on a list of IP addresses.")
    parser.add_argument("ip_list", help="Path to the file containing the list of IP addresses")
    parser.print_help = show_help  # Override the default help message
    args = parser.parse_args()

    client_name = input("Enter the client name: ")
    file = args.ip_list

    if not os.path.isfile(file):
        print("File not found!")
        return

    base_dir = os.path.join(".", client_name, "nmap", "tcp")

    with open(file, 'r') as f:
        for ip in f:
            ip = ip.strip()
            if not ip:
                continue

            filename = ip.replace('.', '_')
            ip_dir = os.path.join(base_dir, filename)
            os.makedirs(ip_dir, exist_ok=True)

            nmap_scan(ip, ip_dir, filename)
            process_nmap_output(ip_dir, filename)

    print("Nmap scan check completed. Proceeding with other scans.")
    run_dirsearch_scans(base_dir)
    run_whatweb_scans(base_dir)
    run_nikto_scans(base_dir)
    run_ssl_scans(base_dir)

    print("All scans (Nmap, Dirsearch, WhatWeb, Nikto, SSLscan, TestSSL) completed for all IP:PORT combinations.")
    
    print("Parsing Dirsearch output files for discovered directories.")
    run_dirsearch_parsing(base_dir, client_name)

    print("Parsing Nikto output files for vulnerabilities.")
    run_nikto_parsing(base_dir, client_name)

if __name__ == "__main__":
    main()
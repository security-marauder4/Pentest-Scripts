#!/bin/bash

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to display banner
display_banner() {
    echo -e "${BLUE}"
    cat << "EOF"
     ___                           ___                                                              
    (   )                         (   )                                                             
  .-.| |       ,--.    ___ .-.     | |   ___    ___ .-. .-.        ,--.     .--.    .--.    .--.    
 /   \ |      /   |   (   )   \    | |  (   )  (   )   '   \      /   |    /    \  (_  |   /    \   
|  .-. |     / .' |    | ' .-. ;   | |  ' /     |  .-.  .-. ;    / .' |   ;  ,-. '   | |  |  .-. ;  
| |  | |    / / | |    |  / (___)  | |,' /      | |  | |  | |   / / | |   | |  | |   | |  |  |(___) 
| |  | |   / /  | |    | |         | .  '.      | |  | |  | |  / /  | |   | |  | |   | |  |  |      
| |  | |  /  `--' |-.  | |         | | `. \     | |  | |  | | /  `--' |-. | |  | |   | |  |  | ___  
| '  | |  `-----| |-'  | |         | |   \ \    | |  | |  | | `-----| |-' | '  | |   | |  |  '(   ) 
' `-'  /        | |    | |         | |    \ .   | |  | |  | |       | |   '  `-' |   | |  '  `-' |  
 `.__,'        (___)  (___)       (___ ) (___) (___)(___)(___)     (___)   `.__. |  (___)  `.__,'   
                                                                           ( `-' ;                  
                                                                            `.__.                   

    ███████╗██╗   ██╗██╗     ██╗  ████████╗ ██████╗██████╗ 
    ██╔════╝██║   ██║██║     ██║  ╚══██╔══╝██╔════╝██╔══██╗
    █████╗  ██║   ██║██║     ██║     ██║   ██║     ██████╔╝
    ██╔══╝  ██║   ██║██║     ██║     ██║   ██║     ██╔═══╝ 
    ██║     ╚██████╔╝███████╗███████╗██║   ╚██████╗██║     
    ╚═╝      ╚═════╝ ╚══════╝╚══════╝╚═╝    ╚═════╝╚═╝     
                                                           
EOF
    echo -e "${NC}"
}

# Function to log messages
log() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    case $level in
        "INFO") echo -e "${GREEN}[INFO]${NC} ${timestamp} - $message" ;;
        "WARN") echo -e "${YELLOW}[WARN]${NC} ${timestamp} - $message" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} ${timestamp} - $message" ;;
    esac
}

# Function to validate IP address
validate_ip() {
    local ip=$1
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to check required tools
check_requirements() {
    local required_tools=("nmap" "tee")
    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            log "ERROR" "$tool is required but not installed."
            exit 1
        fi
    done
}

# Function to perform the Nmap scan
perform_nmap_scan() {
    local ip=$1
    local output_dir=$2
    local filename=$3
    local scan_start_time=$(date '+%Y-%m-%d %H:%M:%S')
    
    log "INFO" "Starting Nmap scan for IP: $ip"
    log "INFO" "Scan start time: $scan_start_time"
    
    # Create a log file for the scan
    local log_file="$output_dir/scan.log"
    
    # Perform the scan with timing and progress information
    nmap -sS -sC -sV -p0- --reason --stats-every 30s \
         -oA "$output_dir/output_$filename" "$ip" 2>&1 | \
         tee -a "$log_file"
    
    local scan_end_time=$(date '+%Y-%m-%d %H:%M:%S')
    log "INFO" "Scan completed for IP: $ip"
    log "INFO" "Scan end time: $scan_end_time"
}

# Function to process discovered ports
process_discovered_ports() {
    local ip_dir=$1
    local filename=$2
    
    log "INFO" "Processing discovered ports"
    
    local discovered_ports_dir="$ip_dir/Discovered_Ports"
    mkdir -p "$discovered_ports_dir" || {
        log "ERROR" "Failed to create directory $discovered_ports_dir"
        return 1
    }
    
    # Process the Nmap output and create service directories
    grep 'tcp' "$ip_dir/output_$filename.nmap" | grep 'open' | while read -r line; do
        local port=$(echo "$line" | awk '{print $1}' | cut -d'/' -f1)
        local service=$(echo "$line" | awk '{print $3}')
        local service_name=$(echo "$service" | cut -d'/' -f1)
        
        local service_dir="$discovered_ports_dir/$service_name"
        local port_dir="$service_dir/$port"
        
        mkdir -p "$port_dir" || {
            log "ERROR" "Failed to create directory for $service at $port_dir"
            continue
        }
        
        # Create a service info file
        echo "Port: $port" > "$port_dir/service_info.txt"
        echo "Service: $service_name" >> "$port_dir/service_info.txt"
        echo "Full Service Details: $line" >> "$port_dir/service_info.txt"
        
        log "INFO" "Created directory and service info for $service_name:$port"
    done
}

# Main script execution
main() {
    display_banner
    check_requirements
    
    # Check command line arguments
    if [ "$#" -ne 1 ]; then
        log "ERROR" "Usage: $0 ip_list.txt"
        exit 1
    fi
    
    # Get client name
    read -p "Enter the client name: " client_name
    if [ -z "$client_name" ]; then
        log "ERROR" "Client name cannot be empty"
        exit 1
    }
    
    local file=$1
    if [ ! -f "$file" ]; then
        log "ERROR" "File not found: $file"
        exit 1
    }
    
    # Create base directory
    local base_dir="./$client_name/nmap/tcp"
    mkdir -p "$base_dir" || {
        log "ERROR" "Failed to create base directory"
        exit 1
    }
    
    # Create a summary file
    local summary_file="$base_dir/scan_summary.txt"
    echo "Scan Summary - $(date)" > "$summary_file"
    echo "===================" >> "$summary_file"
    
    # Process each IP
    while IFS= read -r ip; do
        # Skip empty lines and validate IP
        [ -z "$ip" ] && continue
        if ! validate_ip "$ip"; then
            log "WARN" "Invalid IP address: $ip"
            continue
        }
        
        local filename=$(echo "$ip" | tr '.' '_')
        local ip_dir="$base_dir/$filename"
        mkdir -p "$ip_dir"
        
        # Perform scan and process results
        perform_nmap_scan "$ip" "$ip_dir" "$filename"
        process_discovered_ports "$ip_dir" "$filename"
        
        # Add to summary
        echo "IP: $ip - Scan completed at $(date)" >> "$summary_file"
    done < "$file"
    
    log "INFO" "All scans completed. Results saved in $base_dir"
    log "INFO" "Summary available in $summary_file"
}

# Execute main function
main "$@"
